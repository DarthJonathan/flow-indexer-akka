datastax-java-driver {
    basic {
        contact-points = [ "localhost:9042"]
        load-balancing-policy.local-datacenter = datacenter1
    }
    advanced {
        auth-provider {
            class = PlainTextAuthProvider
            username = cassandra
            password = cassandra
        }
        reconnect-on-init = true
    }
    profiles {
        akka-persistence-cassandra-profile {
            basic.request.consistency = QUORUM
        }
    }
}

akka.projection {
    slick {
        profile = "dev.lucasgrey.flow.indexer.utils.PostgresProfileExtended$"

        db {
            url = "jdbc:postgresql://localhost:5432/flow_indexer"
            user = "postgres"
            password = "postgres"
            driver = "org.postgresql.Driver"

            connectionPool = "HikariCP"
            numThreads = 4
            keepAliveConnection = true
        }

        offset-store {
            schema = "indexer"
            table = "akka_projection_offset_store"
            management-table = "akka_projection_management"
            use-lowercase-schema = true
        }
    }
}

datastax-java-driver {
    advanced.metrics {
        factory {
          # The class for the metrics factory.
          #
          # The driver provides out-of-the-box support for three metrics libraries: Dropwizard,
          # Micrometer and MicroProfile Metrics.
          #
          # Dropwizard is the default metrics library in the driver; to use Dropwizard, this value
          # should be left to its default, "DefaultMetricsFactory", or set to
          # "DropwizardMetricsFactory". The only difference between the two is that the former will work
          # even if Dropwizard is not present on the classpath (in which case it will silently disable
          # metrics), while the latter requires its presence.
          #
          # To select Micrometer, set the value to "MicrometerMetricsFactory", and to select
          # MicroProfile Metrics, set the value to "MicroProfileMetricsFactory". For these libraries to
          # be used, you will also need to add an additional dependency:
          # - Micrometer: com.datastax.oss:java-driver-metrics-micrometer
          # - MicroProfile: com.datastax.oss:java-driver-metrics-microprofile
          #
          # If you would like to use another metrics library, set this value to the fully-qualified name
          # of a class that implements com.datastax.oss.driver.internal.core.metrics.MetricsFactory.
          #
          # It is also possible to use "NoopMetricsFactory", which forcibly disables metrics completely.
          # In fact, "DefaultMetricsFactory" delegates to "DropwizardMetricsFactory" if Dropwizard is
          # present on the classpath, or to "NoopMetricsFactory" if it isn't.
          #
          # Note: specifying a metrics factory is not enough to enable metrics; for the driver to
          # actually start collecting metrics, you also need to specify which metrics to collect. See
          # the following options for more information:
          # - advanced.metrics.session.enabled
          # - advanced.metrics.node.enabled
          #
          # See also the driver online manual for extensive instructions about how to configure metrics.
          #
          # Required: yes
          # Modifiable at runtime: no
          # Overridable in a profile: no
          #class = DefaultMetricsFactory
          class = KamonMetricsFactory
        }

        # This section configures how metric ids are generated. A metric id is a unique combination of
        # a metric name and metric tags.
        id-generator {

          # The class name of a component implementing
          # com.datastax.oss.driver.internal.core.metrics.MetricIdGenerator. If it is not qualified, the
          # driver assumes that it resides in the package com.datastax.oss.driver.internal.core.metrics.
          #
          # The driver ships with two built-in implementations:
          #
          # - DefaultMetricIdGenerator: generates identifiers composed solely of (unique) metric names;
          #   it does not generate tags. It is mostly suitable for use with metrics libraries that do
          #   not support tags, like Dropwizard.
          # - TaggingMetricIdGenerator: generates identifiers composed of name and tags. It is mostly
          #   suitable for use with metrics libraries that support tags, like Micrometer or MicroProfile
          #   Metrics.
          #
          # For example, here is how each one of them generates identifiers for the session metric
          # "bytes-sent", assuming that the session is named "s0":
          # - DefaultMetricIdGenerator: name "s0.bytes-sent", tags: {}.
          # - TaggingMetricIdGenerator: name "session.bytes-sent", tags: {"session":"s0"}
          #
          # Here is how each one of them generates identifiers for the node metric "bytes-sent",
          # assuming that the session is named "s0", and the node's broadcast address is 10.1.2.3:9042:
          # - DefaultMetricIdGenerator: name "s0.nodes.10_1_2_3:9042.bytes-sent", tags: {}.
          # - TaggingMetricIdGenerator: name "nodes.bytes-sent", tags: { "session" : "s0",
          #   "node" : "\10.1.2.3:9042" }
          #
          # As shown above, both built-in implementations generate names that are path-like structures
          # separated by dots. This is indeed the most common expected format by reporting tools.
          #
          # Required: yes
          # Modifiable at runtime: no
          # Overridable in a profile: no
          class = DefaultMetricIdGenerator

          # An optional prefix to prepend to each generated metric name.
          #
          # The prefix should not start nor end with a dot or any other path separator; the following
          # are two valid examples: "cassandra" or "myapp.prod.cassandra".
          #
          # For example, if this prefix is set to "cassandra", here is how the session metric
          # "bytes-sent" would be named, assuming that the session is named "s0":
          # - with DefaultMetricIdGenerator: "cassandra.s0.bytes-sent"
          # - with TaggingMetricIdGenerator: "cassandra.session.bytes-sent"
          #
          # Here is how the node metric "bytes-sent" would be named, assuming that the session is named
          # "s0", and the node's broadcast address is 10.1.2.3:9042:
          # - with DefaultMetricIdGenerator: "cassandra.s0.nodes.10_1_2_3:9042.bytes-sent"
          # - with TaggingMetricIdGenerator: "cassandra.nodes.bytes-sent"
          #
          # Required: no
          # Modifiable at runtime: no
          # Overridable in a profile: no
          prefix = "cassandra"
        }

        # The session-level metrics (all disabled by default).
        #
        # Required: yes
        # Modifiable at runtime: no
        # Overridable in a profile: no
        session {
          enabled = [
            # The number and rate of bytes sent for the entire session (exposed as a Meter if available,
            # otherwise as a Counter).
            bytes-sent,

            # The number and rate of bytes received for the entire session (exposed as a Meter if
            # available, otherwise as a Counter).
            bytes-received

            # The number of nodes to which the driver has at least one active connection (exposed as a
            # Gauge<Integer>).
            connected-nodes,

            # The throughput and latency percentiles of CQL requests (exposed as a Timer).
            #
            # This corresponds to the overall duration of the session.execute() call, including any
            # retry.
            cql-requests,

            # The number of CQL requests that timed out -- that is, the session.execute() call failed
            # with a DriverTimeoutException (exposed as a Counter).
            cql-client-timeouts,

            # The size of the driver-side cache of CQL prepared statements (exposed as a Gauge<Long>).
            #
            # The cache uses weak values eviction, so this represents the number of PreparedStatement
            # instances that your application has created, and is still holding a reference to. Note
            # that the returned value is approximate.
            cql-prepared-cache-size,

            # How long requests are being throttled (exposed as a Timer).
            #
            # This is the time between the start of the session.execute() call, and the moment when
            # the throttler allows the request to proceed.
            throttling.delay,

            # The size of the throttling queue (exposed as a Gauge<Integer>).
            #
            # This is the number of requests that the throttler is currently delaying in order to
            # preserve its SLA. This metric only works with the built-in concurrency- and rate-based
            # throttlers; in other cases, it will always be 0.
            throttling.queue-size,

            # The number of times a request was rejected with a RequestThrottlingException (exposed as
            # a Counter)
            throttling.errors,

            # The throughput and latency percentiles of DSE continuous CQL requests (exposed as a
            # Timer).
            #
            # This metric is a session-level metric and corresponds to the overall duration of the
            # session.executeContinuously() call, including any retry.
            #
            # Note that this metric is analogous to the OSS driver's 'cql-requests' metrics, but for
            # continuous paging requests only. Continuous paging requests do not update the
            # 'cql-requests' metric, because they are usually much longer. Only the following metrics
            # are updated during a continuous paging request:
            #
            # - At node level: all the usual metrics available for normal CQL requests, such as
            #   'cql-messages' and error-related metrics (but these are only updated for the first
            #   page of results);
            # - At session level: only 'continuous-cql-requests' is updated (this metric).
            continuous-cql-requests,

            # The throughput and latency percentiles of Graph requests (exposed as a Timer).
            #
            # This metric is a session-level metric and corresponds to the overall duration of the
            # session.execute(GraphStatement) call, including any retry.
            graph-requests,

            # The number of graph requests that timed out -- that is, the
            # session.execute(GraphStatement) call failed with a DriverTimeoutException (exposed as a
            # Counter).
            #
            # Note that this metric is analogous to the OSS driver's 'cql-client-timeouts' metrics, but
            # for Graph requests only.
            graph-client-timeouts

          ]

          # Extra configuration (for the metrics that need it)

          # Required: if the 'cql-requests' metric is enabled, and Dropwizard or Micrometer is used.
          # Modifiable at runtime: no
          # Overridable in a profile: no
          cql-requests {

            # The largest latency that we expect to record.
            #
            # This should be slightly higher than request.timeout (in theory, readings can't be higher
            # than the timeout, but there might be a small overhead due to internal scheduling).
            #
            # This is used to scale internal data structures. If a higher recording is encountered at
            # runtime, it is discarded and a warning is logged.
            # Valid for: Dropwizard, Micrometer.
            highest-latency = 3 seconds

            # The shortest latency that we expect to record. This is used to scale internal data
            # structures.
            # Valid for: Micrometer.
            lowest-latency = 1 millisecond

            # The number of significant decimal digits to which internal structures will maintain
            # value resolution and separation (for example, 3 means that recordings up to 1 second
            # will be recorded with a resolution of 1 millisecond or better).
            #
            # For Dropwizard, this must be between 0 and 5. If the value is out of range, it defaults to
            # 3 and a warning is logged.
            # Valid for: Dropwizard, Micrometer.
            significant-digits = 3

            # The interval at which percentile data is refreshed.
            #
            # The driver records latency data in a "live" histogram, and serves results from a cached
            # snapshot. Each time the snapshot gets older than the interval, the two are switched.
            # Note that this switch happens upon fetching the metrics, so if you never fetch the
            # recording interval might grow higher (that shouldn't be an issue in a production
            # environment because you would typically have a metrics reporter that exports to a
            # monitoring tool at a regular interval).
            #
            # In practice, this means that if you set this to 5 minutes, you're looking at data from a
            # 5-minute interval in the past, that is at most 5 minutes old. If you fetch the metrics
            # at a faster pace, you will observe the same data for 5 minutes until the interval
            # expires.
            #
            # Note that this does not apply to the total count and rates (those are updated in real
            # time).
            # Valid for: Dropwizard.
            refresh-interval = 5 minutes

            # An optional list of latencies to track as part of the application's service-level
            # objectives (SLOs).
            #
            # If defined, the histogram is guaranteed to contain these boundaries alongside other
            # buckets used to generate aggregable percentile approximations.
            # Valid for: Micrometer.
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]

          }

          # Required: if the 'throttling.delay' metric is enabled, and Dropwizard or Micrometer is used.
          # Modifiable at runtime: no
          # Overridable in a profile: no
          throttling.delay {
            highest-latency = 3 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }

          # Required: if the 'continuous-cql-requests' metric is enabled, and Dropwizard or Micrometer
          # is used.
          # Modifiable at runtime: no
          # Overridable in a profile: no
          continuous-cql-requests {
            highest-latency = 120 seconds
            lowest-latency = 10 milliseconds
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }

          # Required: if the 'graph-requests' metric is enabled, and Dropwizard or Micrometer is used.
          # Modifiable at runtime: no
          # Overridable in a profile: no
          graph-requests {
            highest-latency = 12 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }
        }
    }
}